import{_ as e,C as p,c as h,o as k,ak as t,j as i,a,G as l}from"./chunks/framework.CK5UQgAU.js";const c=JSON.parse('{"title":"基于文件系统的路由","description":"","frontmatter":{},"headers":[],"relativePath":"guide/file-system-route.md","filePath":"guide/file-system-route.md"}'),r={name:"guide/file-system-route.md"};function d(o,s,E,g,u,y){const n=p("Badge");return k(),h("div",null,[s[40]||(s[40]=t(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /guide/file-system-route.md for this page in Markdown format</div><h1 id="基于文件系统的路由" tabindex="-1">基于文件系统的路由 <a class="header-anchor" href="#基于文件系统的路由" aria-label="Permalink to &quot;基于文件系统的路由&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>该特性由 <a href="https://github.com/hannoeru/vite-plugin-pages" target="_blank" rel="noreferrer">vite-plugin-pages</a> 和 <a href="https://github.com/JohnCampionJr/vite-plugin-vue-layouts" target="_blank" rel="noreferrer">vite-plugin-vue-layouts</a> 提供技术支持。</p></div><p>传统使用路由的方式需要手动编写路由，而基于文件系统的路由则会根据 <code>/src/views/</code> 下的文件目录结构，自动生成每个 <code>.vue</code> 文件对应的路由配置，从而节省手动配置路由的时间。</p><h2 id="使用介绍" tabindex="-1">使用介绍 <a class="header-anchor" href="#使用介绍" aria-label="Permalink to &quot;使用介绍&quot;">​</a></h2><p>框架默认不启用该特性，如果需要开启，需要到应用配置里修改设置。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> globalSettings</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  app: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 路由数据来源</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@默认值</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> \`&#39;frontend&#39;\` 前端</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@可选值</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> \`&#39;backend&#39;\` 后端</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@可选值</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> \`&#39;filesystem&#39;\` 文件系统</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    routeBaseOn: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;filesystem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>启用基于文件系统的路由后，<code>/src/router/modules/</code> 目录将不再被需要，而 <code>/src/views/</code> 目录下的文件会自动被注册成路由。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>文件系统                       路由地址                       路由 name</span></span>
<span class="line"><span></span></span>
<span class="line"><span>views</span></span>
<span class="line"><span>├─ example</span></span>
<span class="line"><span>│  ├─ components</span></span>
<span class="line"><span>│  │  └─ List</span></span>
<span class="line"><span>│  │     └─ index.vue</span></span>
<span class="line"><span>│  ├─ params</span></span>
<span class="line"><span>│  │  └─ [id].vue             /example/params/:id          example-params</span></span>
<span class="line"><span>│  ├─ axios.vue               /example/axios               example-axios</span></span>
<span class="line"><span>│  ├─ cookie.vue              /example/cookie              example-cookie</span></span>
<span class="line"><span>│  └─ icon.vue                /example/icon                example-icon</span></span>
<span class="line"><span>├─ [...all].vue               /:all(.*)*                   all</span></span>
<span class="line"><span>├─ index.vue                  /                            index</span></span>
<span class="line"><span>├─ reload.vue                 /reload                      reload</span></span>
<span class="line"><span>└─ login.vue                  /login                       login</span></span></code></pre></div><p>通过上面的示例，可以看出几个特性：</p><ul><li>使用路由参数需通过 [ ] 将参数名包裹，并设为文件名</li><li>文件夹不会生成路由，例如 example 文件夹并没有生成 /example 路由</li><li>路由 name 会根据文件的目录结构自动生成，并用<code>-</code>连接，可确保 name 的唯一性</li><li>所有 <code>components/</code> 目录均不会生成路由</li></ul><h2 id="进阶使用" tabindex="-1">进阶使用 <a class="header-anchor" href="#进阶使用" aria-label="Permalink to &quot;进阶使用&quot;">​</a></h2><p>默认生成的路由均为嵌套路由，父级 component 指向 <code>/src/layouts/index.vue</code> 组件，即：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生成的路由</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/example/list&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/src/layouts/index.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/src/views/example/list.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;example-list&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      meta: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        layout: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你可以在 SFC 单文件组件里将 layout 设置为 false，这样该路由则不会生成嵌套路由：</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">route</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;yaml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line highlighted"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  layout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;列表页&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生成的路由</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/example/list&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/src/views/example/list.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;example-list&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    layout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="路由参数" tabindex="-1">路由参数 <a class="header-anchor" href="#路由参数" aria-label="Permalink to &quot;路由参数&quot;">​</a></h2><p>你应该已经发现，原先在路由的配置信息被转移到了 SFC 单文件组件里的 <code>&lt;route&gt;&lt;/route&gt;</code> 标签内。</p><p>需要注意的是，既然使用了基于文件系统的路由，不建议再手动去设置 <code>path</code> 和 <code>name</code> ，同时因为路由不再承担生成导航的特性，所以 <code>meta</code> 对象的可配置项也有部分调整，仅支持以下参数：</p>`,20)),i("ul",null,[s[8]||(s[8]=i("li",null,[i("a",{href:"./router.html#title"},"title")],-1)),s[9]||(s[9]=i("li",null,[i("a",{href:"./router.html#icon"},"icon")],-1)),i("li",null,[s[0]||(s[0]=i("a",{href:"./router.html#activeicon"},"activeIcon",-1)),s[1]||(s[1]=a()),l(n,{type:"pro",text:"专业版"})]),i("li",null,[s[2]||(s[2]=i("a",{href:"./router.html#permanent"},"permanent",-1)),s[3]||(s[3]=a()),l(n,{type:"pro",text:"专业版"})]),s[10]||(s[10]=i("li",null,[i("a",{href:"./router.html#auth"},"auth")],-1)),s[11]||(s[11]=i("li",null,[i("a",{href:"./router.html#activemenu"},"activeMenu")],-1)),s[12]||(s[12]=i("li",null,[i("a",{href:"./router.html#cache"},"cache")],-1)),i("li",null,[s[4]||(s[4]=i("a",{href:"./router.html#nocache"},"noCache",-1)),s[5]||(s[5]=a()),l(n,{type:"pro",text:"专业版"})]),i("li",null,[s[6]||(s[6]=i("a",{href:"./router.html#copyright"},"copyright",-1)),s[7]||(s[7]=a()),l(n,{type:"pro",text:"专业版"})])]),s[41]||(s[41]=t('<p>另外还新增了三个特殊参数：</p><h3 id="enabled" tabindex="-1">enabled <a class="header-anchor" href="#enabled" aria-label="Permalink to &quot;enabled&quot;">​</a></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>true</code></li><li>说明：是否将该文件生成路由</li></ul><p>如果你想临时取消某个文件路由的生成，可以通过设置 <code>enabled: false</code> 来实现，从而不需要通过删除文件来实现。</p><h3 id="layout" tabindex="-1">layout <a class="header-anchor" href="#layout" aria-label="Permalink to &quot;layout&quot;">​</a></h3><ul><li>类型：<code>boolean | string</code></li><li>默认值：<code>&#39;index&#39;</code></li><li>说明：布局模版名称，对应 layouts 目录下文件名</li></ul><h3 id="constant" tabindex="-1">constant <a class="header-anchor" href="#constant" aria-label="Permalink to &quot;constant&quot;">​</a></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>false</code></li><li>说明：是否为固定路由，默认为动态路由</li></ul><h2 id="导航参数" tabindex="-1">导航参数 <a class="header-anchor" href="#导航参数" aria-label="Permalink to &quot;导航参数&quot;">​</a></h2><p>由于导航无法通过路由自动生成，所以在基于文件系统的路由模式下，我们需要手动配置导航数据。</p><p>导航数据存放在 <code>/menu/</code> 目录下，和 <code>/router/</code> 的目录结构类似， <code>/menu/modules/</code> 用于存放每个模块的导航配置，最终在 <code>/menu/index.ts</code> 文件里引用并进行归类，即主导航。</p><p>导航对象有三个标准参数：</p>',12)),i("ul",null,[s[38]||(s[38]=i("li",null,"path 完整路由地址，如果有下级导航，则无需设置",-1)),i("li",null,[s[35]||(s[35]=a("meta 同路由 ",-1)),s[36]||(s[36]=i("code",null,"meta",-1)),s[37]||(s[37]=a(" 对象，支持以下参数： ",-1)),i("ul",null,[s[31]||(s[31]=i("li",null,[i("a",{href:"./router.html#title"},"title")],-1)),s[32]||(s[32]=i("li",null,[i("a",{href:"./router.html#icon"},"icon")],-1)),i("li",null,[s[13]||(s[13]=i("a",{href:"./router.html#activeicon"},"activeIcon",-1)),s[14]||(s[14]=a()),l(n,{type:"pro",text:"专业版"})]),s[33]||(s[33]=i("li",null,[i("a",{href:"./router.html#auth"},"auth")],-1)),i("li",null,[s[15]||(s[15]=i("a",{href:"./router.html#badge"},"badge",-1)),s[16]||(s[16]=a()),l(n,{type:"pro",text:"专业版"})]),i("li",null,[s[17]||(s[17]=i("a",{href:"./router.html#badgevariant"},"badgeVariant",-1)),s[18]||(s[18]=a()),l(n,{type:"pro",text:"专业版"})]),i("li",null,[s[19]||(s[19]=i("a",{href:"./router.html#query"},"query",-1)),s[20]||(s[20]=a()),l(n,{type:"pro",text:"专业版"})]),i("li",null,[s[21]||(s[21]=i("a",{href:"./router.html#maximize"},"maximize",-1)),s[22]||(s[22]=a()),l(n,{type:"pro",text:"专业版"})]),i("li",null,[s[23]||(s[23]=i("a",{href:"./router.html#exitmaximize"},"exitMaximize",-1)),s[24]||(s[24]=a()),l(n,{type:"pro",text:"专业版"})]),i("li",null,[s[25]||(s[25]=i("a",{href:"./router.html#newwindow"},"newWindow",-1)),s[26]||(s[26]=a()),l(n,{type:"pro",text:"专业版"})]),i("li",null,[s[27]||(s[27]=i("a",{href:"./router.html#iframe"},"iframe",-1)),s[28]||(s[28]=a()),l(n,{type:"pro",text:"专业版"})]),s[34]||(s[34]=i("li",null,[i("a",{href:"./router.html#link"},"link")],-1)),i("li",null,[s[29]||(s[29]=i("a",{href:"./router.html#sort"},"sort",-1)),s[30]||(s[30]=a()),l(n,{type:"pro",text:"专业版"})])])]),s[39]||(s[39]=i("li",null,"children 下级导航数组",-1))]),s[42]||(s[42]=t(`<p>同样的，导航数据也可通过后端进行返回，只需在应用配置中设置：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> globalSettings</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Settings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  menu: {</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 导航栏数据来源，当 \`app.routeBaseOn: &#39;filesystem&#39;\` 时生效</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@默认值</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> \`&#39;frontend&#39;\` 前端</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@可选值</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> \`&#39;backend&#39;\` 后端</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    baseOn: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;backend&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>开启后在 <code>/src/api/modules/app.ts</code> 文件里找到 <code>menuList()</code> 这个函数，并修改这个函数的请求地址，请求返回的数据就是导航数据，你可以在 <code>/src/mock/app.ts</code> 里查看 mock 数据。</p><h2 id="功能取舍" tabindex="-1">功能取舍 <a class="header-anchor" href="#功能取舍" aria-label="Permalink to &quot;功能取舍&quot;">​</a></h2><p>需要注意，使用文件系统的路由后，将无法再使用以下功能或特性：</p><ul><li>面包屑导航</li><li>次导航默认展开</li><li>次导航始终展开</li><li>JSX</li></ul>`,6))])}const F=e(r,[["render",d]]);export{c as __pageData,F as default};
