import{_ as i,c as a,o as e,ak as t}from"./chunks/framework.CK5UQgAU.js";const E=JSON.parse('{"title":"JSX","description":"","frontmatter":{},"headers":[],"relativePath":"guide/jsx.md","filePath":"guide/jsx.md"}'),n={name:"guide/jsx.md"};function l(h,s,p,r,k,d){return e(),a("div",null,[...s[0]||(s[0]=[t(`<div style="display:none;" hidden="true" aria-hidden="true">Are you an LLM? You can read better optimized documentation at /guide/jsx.md for this page in Markdown format</div><h1 id="jsx" tabindex="-1">JSX <a class="header-anchor" href="#jsx" aria-label="Permalink to &quot;JSX&quot;">​</a></h1><blockquote><p>如果你不了解 JSX ，甚至没有听说过，可以访问最后推荐的几篇文章，先快速了解熟悉下。</p></blockquote><p>首先说明一点，JSX 并不是 Vue 官方推崇的开发方式，这点从 Vue 官方文档上就可以看来出来。Vue 官方推荐大家使用 SFC(Single File Component) 的方式去编写 Vue 组件，也就是我们熟悉的 <code>.vue</code> 文件。</p><h2 id="开发模式" tabindex="-1">开发模式 <a class="header-anchor" href="#开发模式" aria-label="Permalink to &quot;开发模式&quot;">​</a></h2><h3 id="在-tsx-文件中开发" tabindex="-1">在 tsx 文件中开发 <a class="header-anchor" href="#在-tsx-文件中开发" aria-label="Permalink to &quot;在 tsx 文件中开发&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 render 中返回</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Tsx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;我是一个div&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 setup 中返回</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Tsx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;我是一个div&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>以上两种方式均可以，具体看个人开发习惯。其中 setup 中访问不到 <code>this</code> ，而在 render 中可以通过 <code>this</code> 访问当前 Vue 实例。</p><h3 id="在-vue-文件中开发" tabindex="-1">在 vue 文件中开发 <a class="header-anchor" href="#在-vue-文件中开发" aria-label="Permalink to &quot;在 vue 文件中开发&quot;">​</a></h3><p>是的，你依旧可以在 <code>.vue</code> 文件中以 SFC 的方式去编写开发我们的业务代码，只需要给 <code>&lt;script&gt;</code> 标签增加 <code>lang=&quot;tsx&quot;</code> 的设置即可，同样也支持上面所提到的两种开发方式。</p><p>此外，在 <code>.vue</code> 文件中开发可直接使用 <code>&lt;style scoped&gt;</code> 特性，而在 <code>.tsx</code> 文件中开发，则需要使用 <a href="https://cn.vitejs.dev/guide/features.html#css-modules" target="_blank" rel="noreferrer">CSS Modules</a> 来实现样式隔离。</p><h2 id="阅读参考" tabindex="-1">阅读参考 <a class="header-anchor" href="#阅读参考" aria-label="Permalink to &quot;阅读参考&quot;">​</a></h2><blockquote><p>由于作者对 JSX 的了解也仅是浅尝辄止，更多的使用技巧可参考下面相关链接，同时也欢迎对 JSX 有深入使用经验的小伙伴加群讨论。</p></blockquote><ul><li><a href="https://github.com/vuejs/babel-plugin-jsx#syntax" target="_blank" rel="noreferrer">JSX 语法</a></li><li><a href="https://www.jiangweishan.com/article/vuejs20210715a3.html" target="_blank" rel="noreferrer">在 vue3 中编写 jsx 的两种方式</a></li><li><a href="https://juejin.cn/post/6846687592138670094" target="_blank" rel="noreferrer">拥抱 Vue3 系列之 JSX 语法</a></li><li><a href="https://juejin.cn/post/6911175470255964174" target="_blank" rel="noreferrer">为什么我推荐使用 JSX 开发 Vue3</a></li><li><a href="https://juejin.cn/post/6911883529098002446" target="_blank" rel="noreferrer">vue3 下 jsx 教学，保证业务上手无问题！手敲代码，有知识点，附带和 template 对比</a></li></ul>`,14)])])}const c=i(n,[["render",l]]);export{E as __pageData,c as default};
